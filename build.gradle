plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.ben-manes.versions" version "0.52.0"
}

group = 'de.longri'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework:spring-jdbc:7.0.0-M6'

    // Spring Framework Komponenten-Support
    implementation 'org.springframework:spring-context:7.0.0-M6'

    // JSON Bibliothek
    implementation 'org.json:json:20250517'

    // SLF4J Logger
    implementation 'org.slf4j:slf4j-api:2.1.0-alpha1'

    testImplementation 'org.apache.commons:commons-lang3:3.18.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0-M1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:6.0.0-M1'
}

test {
    useJUnitPlatform()
}

if (file('gradle.properties.local').exists()) {
    def props = new Properties()
    file('gradle.properties.local').withInputStream { props.load(it) }
    props.each { key, value -> project.ext.set(key, value) }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/" + rootProject.name + "-" + version + ".jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            name 'deploy'
            url deployRepoUrl
            allowInsecureProtocol = true
            credentials {
                username = deployRepoUsername
                password = deployRepoPassword
            }
        }
    }
}
task _FAT_JAR(dependsOn: test, type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': 'com.longri'
    }
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    with jar
}
task _CLEAN_TO_NEXUS {
}
task _BUILD_TO_NEXUS(dependsOn: _CLEAN_TO_NEXUS) {
}
task PUBLISH_TO_NEXUS(dependsOn: _BUILD_TO_NEXUS) {
    println "PUBLISH_TO_NEXUS version $version"
}
_CLEAN_TO_NEXUS.dependsOn(clean)
_BUILD_TO_NEXUS.dependsOn(_FAT_JAR)
PUBLISH_TO_NEXUS.mustRunAfter(_FAT_JAR)
PUBLISH_TO_NEXUS.dependsOn(publishAllPublicationsToDeployRepository)
publishMavenPublicationToDeployRepository.dependsOn(_FAT_JAR)

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }
tasks.withType(Jar).all { duplicatesStrategy 'exclude' }